// Code generated by MockGen. DO NOT EDIT.
// Source: cosmos-go-sdk/rest (interfaces: IResource)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIResource is a mock of IResource interface
type MockIResource struct {
	ctrl     *gomock.Controller
	recorder *MockIResourceMockRecorder
}

// MockIResourceMockRecorder is the mock recorder for MockIResource
type MockIResourceMockRecorder struct {
	mock *MockIResource
}

// NewMockIResource creates a new mock instance
func NewMockIResource(ctrl *gomock.Controller) *MockIResource {
	mock := &MockIResource{ctrl: ctrl}
	mock.recorder = &MockIResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIResource) EXPECT() *MockIResourceMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockIResource) Account() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(string)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockIResourceMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockIResource)(nil).Account))
}

// ID mocks base method
func (m *MockIResource) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockIResourceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIResource)(nil).ID))
}

// URI mocks base method
func (m *MockIResource) URI() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URI")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URI indicates an expected call of URI
func (mr *MockIResourceMockRecorder) URI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URI", reflect.TypeOf((*MockIResource)(nil).URI))
}
