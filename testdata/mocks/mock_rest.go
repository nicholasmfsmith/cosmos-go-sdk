// Code generated by MockGen. DO NOT EDIT.
// Source: cosmos-go-sdk/rest (interfaces: IRequest)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRequest is a mock of IRequest interface
type MockIRequest struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestMockRecorder
}

// MockIRequestMockRecorder is the mock recorder for MockIRequest
type MockIRequestMockRecorder struct {
	mock *MockIRequest
}

// NewMockIRequest creates a new mock instance
func NewMockIRequest(ctrl *gomock.Controller) *MockIRequest {
	mock := &MockIRequest{ctrl: ctrl}
	mock.recorder = &MockIRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRequest) EXPECT() *MockIRequestMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockIRequest) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIRequestMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRequest)(nil).Delete))
}

// Get mocks base method
func (m *MockIRequest) Get() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIRequestMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRequest)(nil).Get))
}

// Post mocks base method
func (m *MockIRequest) Post(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockIRequestMockRecorder) Post(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIRequest)(nil).Post), arg0)
}

// Put mocks base method
func (m *MockIRequest) Put(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockIRequestMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIRequest)(nil).Put), arg0)
}